package edu.utdallas.paged.sdb.engine;

import com.hp.hpl.jena.query.Query;
import com.hp.hpl.jena.sdb.Store;
import com.hp.hpl.jena.sdb.core.SDBRequest;
import com.hp.hpl.jena.sdb.store.DatasetStoreGraph;
import com.hp.hpl.jena.sparql.algebra.Op;
import com.hp.hpl.jena.sparql.core.DatasetGraph;
import com.hp.hpl.jena.sparql.engine.ExecutionContext;
import com.hp.hpl.jena.sparql.engine.Plan;
import com.hp.hpl.jena.sparql.engine.QueryEngineBase;
import com.hp.hpl.jena.sparql.engine.QueryEngineFactory;
import com.hp.hpl.jena.sparql.engine.QueryEngineRegistry;
import com.hp.hpl.jena.sparql.engine.QueryIterator;
import com.hp.hpl.jena.sparql.engine.binding.Binding;
import com.hp.hpl.jena.sparql.engine.binding.BindingRoot;
import com.hp.hpl.jena.sparql.engine.iterator.QueryIterSingleton;
import com.hp.hpl.jena.sparql.engine.iterator.QueryIteratorCheck;
import com.hp.hpl.jena.sparql.engine.main.QC;
import com.hp.hpl.jena.sparql.util.Context;

import edu.utdallas.paged.sdb.compiler.PagedCompile;
import edu.utdallas.paged.sdb.compiler.PagedOpSQL;

/**
 * @see com.hp.hpl.jena.sdb.engine.QueryEngineSDB
 * @author vaibhav
 */
public class PagedQueryEngineSDB extends QueryEngineBase
{
    private Store store ;
    private SDBRequest request = null ;
    private Op originalOp = null ;

    /**
     * Constructor
     * @param store - the Store object
     * @param q - the Query object
     */
    public PagedQueryEngineSDB(Store store, Query q)
    {
        this(new DatasetStoreGraph(store), q, BindingRoot.create(), null) ;
    }

    /**
     * Constructor
     * @param dsg - the dataset store graph
     * @param query - the Query object
     * @param initialBinding - the binding for the query
     * @param context - the context of the query
     */
    public PagedQueryEngineSDB(DatasetStoreGraph dsg, Query query, Binding initialBinding, Context context)
    {
        super(query, dsg, initialBinding, context) ;
        init(dsg, query, initialBinding, context) ;
    }

    /**
     * Constructor
     * @param dsg - the dataset store graph
     * @param op - the operator
     * @param initialBinding - the binding for the query
     * @param context - the context of the query
     */
    public PagedQueryEngineSDB(DatasetStoreGraph dsg, Op op, Binding initialBinding, Context context)
    {
        super(op, dsg, initialBinding, context) ;
        init(dsg, null, initialBinding, context) ;
    }
    
    /**
     * Method that initializes the query engine given the parameters
     * @param dsg - the dataset store graph
     * @param query - the Query object
     * @param initialBinding - the binding for the query
     * @param context - the context of the query
     */
    private void init(DatasetStoreGraph dsg, Query query, Binding initialBinding, Context context)
    {
        this.store = dsg.getStore() ;
        this.request = new SDBRequest(store, query, context) ;
        this.originalOp = getOp() ;
        Op op = PagedCompile.compile(store, originalOp, initialBinding, context, request) ;
        setOp(op) ;
    }
 
    /**
     * Method that returns the request that is generated by this engine
     * @return a request
     */
    public SDBRequest getRequest()      { return request ; }

    /**
     * @see com.hp.hpl.jena.sparql.engine.QueryEngineBase#eval(Op, DatasetGraph, Binding, Context)
     */
    @Override
    public QueryIterator eval(Op op, DatasetGraph dsg, Binding binding, Context context)
    {
        ExecutionContext execCxt = new ExecutionContext(context, dsg.getDefaultGraph(), dsg, QC.getFactory(context)) ;
        
        // This pattern is common to QueryEngineMain - find a sharing pattern 
        if ( ! ( op instanceof PagedOpSQL ) )
        {
            // Not top - invoke the main query engine as a framework to
            // put all the sub-opSQL parts together.
            QueryIterator input = new QueryIterSingleton(binding, execCxt) ;
            QueryIterator qIter = QC.execute(op, input, execCxt) ;  // OpCompiler from main query engine.
            qIter = QueryIteratorCheck.check(qIter, execCxt) ;
            return qIter ;
          }
          // Direct.
          PagedOpSQL opSQL = (PagedOpSQL) op ;
          QueryIterator qIter = opSQL.exec(binding, execCxt) ;

          if( qIter != null )	
          	  {	qIter = QueryIteratorCheck.check(qIter, execCxt) ; return qIter ; }
          else
        	  return null;
    }
    
    // -------- Factory
    
    /** the query engine factory **/
    static private QueryEngineFactory factory = new PagedQueryEngineFactorySDB() ;
    
    /**
     * Method that returns the query engine factory
     * @return the query engine factory
     */
    static public QueryEngineFactory getFactory()   { return factory ; }
    
    /**
     * Register a query engine factory
     */
    static public void register()       { QueryEngineRegistry.addFactory(factory) ; }

    /**
     * Unregister a query engine factory
     */
    static public void unregister()     { QueryEngineRegistry.removeFactory(factory) ; }
    
    /**
     * A factory class for query engines
     * @author vaibhav
     */
    private static class PagedQueryEngineFactorySDB implements QueryEngineFactory
    {
    	/**
    	 * Method that checks the input instance of a dataset graph
    	 */
        public boolean accept(Query query, DatasetGraph dataset, Context context)
        {
            if ( dataset instanceof DatasetStoreGraph )
                return true ;
            return false ;
        }

    	/**
    	 * Method that creates a query plan
    	 */
        public Plan create(Query query, DatasetGraph dataset, Binding inputBinding, Context context)
        {
            PagedQueryEngineSDB qe = new PagedQueryEngineSDB((DatasetStoreGraph)dataset , query, inputBinding, context) ;
            return qe.getPlan() ;
        }

    	/**
    	 * Method that checks the input instance of a dataset graph
    	 */
        public boolean accept(Op op, DatasetGraph dataset, Context context)
        {
            if ( dataset instanceof DatasetStoreGraph )
                return true ;
            return false ;
        }

    	/**
    	 * Method that creates a query plan
    	 */
        public Plan create(Op op, DatasetGraph dataset, Binding inputBinding, Context context)
        {
            if ( inputBinding == null )
                inputBinding = BindingRoot.create();
            PagedQueryEngineSDB qe = new PagedQueryEngineSDB((DatasetStoreGraph)dataset, op, inputBinding, context) ;
            return qe.getPlan() ;
        }
    }
}
/** Copyright (c) 2008-2010, The University of Texas at Dallas
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*     * Redistributions of source code must retain the above copyright
*       notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in the
*       documentation and/or other materials provided with the distribution.
*     * Neither the name of the The University of Texas at Dallas nor the
*       names of its contributors may be used to endorse or promote products
*       derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY The University of Texas at Dallas ''AS IS'' AND ANY
* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL The University of Texas at Dallas BE LIABLE FOR ANY
* DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/